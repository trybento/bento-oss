/* Auto-generated by graphql-codegen. Do not edit. */
/* eslint-disable */
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  Date: { input: any; output: any; }
  DateTime: { input: Date; output: Date; }
  EntityId: { input: string; output: string; }
  JSON: { input: any; output: any; }
  JSONObject: { input: any; output: any; }
  TargetAttributeRuleFields: { input: any; output: any; }
  TargetValueScalarType: { input: any; output: any; }
};

export type Account = {
  __typename?: 'Account';
  accountUsers: Array<AccountUser>;
  archived: Scalars['Boolean']['output'];
  /** The attributes associated with this account */
  attributes: Scalars['JSON']['output'];
  blockedAt?: Maybe<Scalars['DateTime']['output']>;
  blockedBy?: Maybe<User>;
  /** When the account was created in the organization (as opposed to within Bento) */
  createdInOrganizationAt?: Maybe<Scalars['DateTime']['output']>;
  entityId: Scalars['EntityId']['output'];
  /** The user-supplied unique ID for the Account */
  externalId?: Maybe<Scalars['String']['output']>;
  /** The guide bases belonging to the account */
  guideBases: Array<GuideBase>;
  /** The count of guide-bases in the account */
  guideBasesCount: Scalars['Int']['output'];
  /** Does the account have an active account onboarding guide */
  hasActiveAccountGuide: Scalars['Boolean']['output'];
  /** Does the account have an active guide with the given template */
  hasGuideBaseWithTemplate: Scalars['Boolean']['output'];
  /** Determine whether the account has at least one guide */
  hasGuides: Scalars['Boolean']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** Last time a user was active in this account */
  lastActiveAt?: Maybe<Scalars['DateTime']['output']>;
  /** The name of the account */
  name: Scalars['String']['output'];
  /** The count of participants who viewed guides */
  participantsWhoViewedGuidesCount: Scalars['Int']['output'];
  primaryContact?: Maybe<User>;
};


export type AccountHasGuideBaseWithTemplateArgs = {
  templateEntityId?: InputMaybe<Scalars['EntityId']['input']>;
};

export type AccountUser = {
  __typename?: 'AccountUser';
  /** The account for whom this user belongs */
  account: Account;
  /** The attributes associated with this account */
  attributes: Scalars['JSON']['output'];
  /** @deprecated does not exist anymore, will be removed */
  avatarUrl?: Maybe<Scalars['String']['output']>;
  createdInOrganizationAt?: Maybe<Scalars['DateTime']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  entityId: Scalars['EntityId']['output'];
  externalId?: Maybe<Scalars['String']['output']>;
  fullName?: Maybe<Scalars['String']['output']>;
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** The last guide the user interacted with */
  latestGuide?: Maybe<Scalars['JSON']['output']>;
};

/** Shadow style of active steps */
export enum ActiveStepShadowType {
  Custom = 'custom',
  None = 'none',
  Standard = 'standard'
}

/** Additional branding colors of an org */
export type AdditionalColorsType = {
  __typename?: 'AdditionalColorsType';
  value: Scalars['String']['output'];
};

export type AllGuidesStyleType = {
  __typename?: 'AllGuidesStyleType';
  activeGuidesTitle: Scalars['String']['output'];
  allGuidesTitle: Scalars['String']['output'];
  previousAnnouncementsTitle: Scalars['String']['output'];
  previousGuidesTitle: Scalars['String']['output'];
};

/** Name and count of CTA activity */
export type AnnouncementCtaActivity = {
  __typename?: 'AnnouncementCtaActivity';
  count: Scalars['Int']['output'];
  /** This can be null if the original CTA associated was changed or removed */
  cta?: Maybe<GuideBaseStepCta>;
  ctaEntityId?: Maybe<Scalars['EntityId']['output']>;
  /** Label of the CTA in question */
  text: Scalars['String']['output'];
};

/** The box shadow for announcements */
export enum AnnouncementShadowType {
  None = 'none',
  Standard = 'standard'
}

/** Announcement activity data for one day, used with time series */
export type AnnouncementTimeSeriesPoint = {
  __typename?: 'AnnouncementTimeSeriesPoint';
  ctaActivity: Array<Maybe<AnnouncementCtaActivity>>;
  date: Scalars['Date']['output'];
  dismissed: Scalars['Int']['output'];
  savedForLater: Scalars['Int']['output'];
  viewed: Scalars['Int']['output'];
};

export type Attribute = {
  __typename?: 'Attribute';
  entityId: Scalars['EntityId']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** The identifier for the attribute */
  name: Scalars['String']['output'];
  /** The type of the attribute */
  type?: Maybe<AttributeType>;
  /** The type of the value for this attribute */
  valueType: AttributeValueType;
};

export enum AttributeType {
  Account = 'account',
  AccountUser = 'account_user'
}

export enum AttributeValueType {
  Audience = 'audience',
  Boolean = 'boolean',
  BranchingPath = 'branchingPath',
  Date = 'date',
  Number = 'number',
  StringArray = 'stringArray',
  Template = 'template',
  Text = 'text'
}

export enum AttributeValueTypeEnumType {
  Audience = 'audience',
  Boolean = 'boolean',
  BranchingPath = 'branchingPath',
  Date = 'date',
  Number = 'number',
  StringArray = 'stringArray',
  Template = 'template',
  Text = 'text'
}

export type AutoCompleteInteraction = OnGuideCompletion;

export enum AutoCompleteInteractionType {
  GuideCompletion = 'guide_completion'
}

/** The inner padding of banners */
export enum BannerPaddingType {
  Large = 'large',
  Medium = 'medium',
  Small = 'small'
}

export enum BannerPosition {
  Bottom = 'bottom',
  Top = 'top'
}

export type BannerStyle = {
  __typename?: 'BannerStyle';
  backgroundColor?: Maybe<Scalars['String']['output']>;
  bannerPosition: BannerPosition;
  bannerType: BannerType;
  canDismiss?: Maybe<Scalars['Boolean']['output']>;
  ctasOrientation?: Maybe<CtasOrientation>;
  textColor?: Maybe<Scalars['String']['output']>;
};

export enum BannerType {
  Floating = 'floating',
  Inline = 'inline'
}

/** The org banners styles */
export type BannersStyleStyleType = {
  __typename?: 'BannersStyleStyleType';
  borderRadius?: Maybe<Scalars['Int']['output']>;
  padding?: Maybe<BannerPaddingType>;
  shadow?: Maybe<AnnouncementShadowType>;
};

/** What integration this key is for */
export enum BentoApiKeyTypeEnum {
  Api = 'api'
}

export type BranchingBaseStyle = {
  __typename?: 'BranchingBaseStyle';
  formFactor?: Maybe<Scalars['String']['output']>;
};

export type BranchingCardStyle = {
  __typename?: 'BranchingCardStyle';
  backgroundImagePosition: CyoaBackgroundImagePosition;
  backgroundImageUrl?: Maybe<Scalars['String']['output']>;
  formFactor?: Maybe<Scalars['String']['output']>;
};

export type BranchingChoice = {
  __typename?: 'BranchingChoice';
  choiceKey?: Maybe<Scalars['String']['output']>;
  label?: Maybe<Scalars['String']['output']>;
  selected?: Maybe<Scalars['Boolean']['output']>;
  /** Branching style based on the branching form factor */
  style?: Maybe<BranchingStyle>;
};

/** Branching Entity Type */
export enum BranchingEntityTypeEnum {
  Guide = 'guide',
  Module = 'module',
  Template = 'template'
}

/** How branching will be displayed on the embeddable */
export enum BranchingFormFactorEnumType {
  Cards = 'cards',
  Dropdown = 'dropdown'
}

export type BranchingPath = {
  __typename?: 'BranchingPath';
  /** The type of action that is performed */
  actionType: BranchingPathActionType;
  branchingKey?: Maybe<Scalars['String']['output']>;
  choiceKey?: Maybe<Scalars['String']['output']>;
  entityId: Scalars['EntityId']['output'];
  /** The type of entity that is created by the action */
  entityType: BranchingPathEntityType;
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** If the entityType is "module", the module that gets added onto the users guide */
  module?: Maybe<Module>;
  /** The entity id for the template associated with this branch */
  moduleEntityId?: Maybe<Scalars['EntityId']['output']>;
  orderIndex?: Maybe<Scalars['Int']['output']>;
  /** If the entityType is "template" or "guide", the template from which a guide is generated */
  template?: Maybe<Template>;
  /** The entity id for the template associated with this branch */
  templateEntityId?: Maybe<Scalars['EntityId']['output']>;
  triggeredCount: Scalars['Int']['output'];
};

export enum BranchingPathActionType {
  Create = 'create'
}

export enum BranchingPathEntityType {
  Guide = 'guide',
  Module = 'module',
  /** @deprecated Use "guide" */
  Template = 'template'
}

/** Branching performance by destination, for step group branching */
export type BranchingPerformance = {
  __typename?: 'BranchingPerformance';
  branchingPath?: Maybe<BranchingPath>;
  count: Scalars['Int']['output'];
  /** Step group targeted by branching */
  createdModule?: Maybe<Module>;
  /** Guide targeted by branching */
  createdTemplate?: Maybe<Template>;
};

export type BranchingQuestion = {
  __typename?: 'BranchingQuestion';
  branchingKey: Scalars['String']['output'];
  choices: Array<BranchingQuestionChoice>;
  id: Scalars['String']['output'];
  question: Scalars['String']['output'];
};

export type BranchingQuestionChoice = {
  __typename?: 'BranchingQuestionChoice';
  choiceKey: Scalars['String']['output'];
  id: Scalars['String']['output'];
  label: Scalars['String']['output'];
};

export type BranchingStyle = BranchingBaseStyle | BranchingCardStyle;

export enum CyoaBackgroundImagePosition {
  Background = 'background',
  Bottom = 'bottom',
  Left = 'left',
  Right = 'right',
  Top = 'top'
}

export type CardStyle = {
  __typename?: 'CardStyle';
  advancedPadding?: Maybe<Scalars['String']['output']>;
  backgroundColor?: Maybe<Scalars['String']['output']>;
  borderColor?: Maybe<Scalars['String']['output']>;
  borderRadius?: Maybe<Scalars['Int']['output']>;
  canDismiss?: Maybe<Scalars['Boolean']['output']>;
  ctasOrientation?: Maybe<CtasOrientation>;
  height?: Maybe<Scalars['Int']['output']>;
  horizontalMediaAlignment?: Maybe<HorizontalMediaAlignment>;
  imageWidth?: Maybe<Scalars['String']['output']>;
  mediaFontSize?: Maybe<Scalars['Int']['output']>;
  mediaOrientation?: Maybe<MediaOrientation>;
  mediaTextColor?: Maybe<Scalars['String']['output']>;
  padding?: Maybe<Scalars['Int']['output']>;
  stepBodyOrientation?: Maybe<StepBodyOrientation>;
  textColor?: Maybe<Scalars['String']['output']>;
  verticalMediaAlignment?: Maybe<VerticalMediaAlignment>;
  verticalMediaOrientation?: Maybe<VerticalMediaOrientation>;
};

export type CarouselStyle = {
  __typename?: 'CarouselStyle';
  advancedPadding?: Maybe<Scalars['String']['output']>;
  backgroundColor?: Maybe<Scalars['String']['output']>;
  borderColor?: Maybe<Scalars['String']['output']>;
  borderRadius?: Maybe<Scalars['Int']['output']>;
  canDismiss?: Maybe<Scalars['Boolean']['output']>;
  ctasOrientation?: Maybe<CtasOrientation>;
  dotsColor?: Maybe<Scalars['String']['output']>;
  height?: Maybe<Scalars['Int']['output']>;
  horizontalMediaAlignment?: Maybe<HorizontalMediaAlignment>;
  imageWidth?: Maybe<Scalars['String']['output']>;
  mediaFontSize?: Maybe<Scalars['Int']['output']>;
  mediaOrientation?: Maybe<MediaOrientation>;
  mediaTextColor?: Maybe<Scalars['String']['output']>;
  padding?: Maybe<Scalars['Int']['output']>;
  stepBodyOrientation?: Maybe<StepBodyOrientation>;
  textColor?: Maybe<Scalars['String']['output']>;
  verticalMediaAlignment?: Maybe<VerticalMediaAlignment>;
  verticalMediaOrientation?: Maybe<VerticalMediaOrientation>;
};

export type ChecklistStyle = {
  __typename?: 'ChecklistStyle';
  ctasOrientation?: Maybe<CtasOrientation>;
  height?: Maybe<Scalars['Int']['output']>;
  hideCompletedSteps?: Maybe<Scalars['Boolean']['output']>;
  hideStepGroupTitle?: Maybe<Scalars['Boolean']['output']>;
  horizontalMediaAlignment?: Maybe<HorizontalMediaAlignment>;
  imageWidth?: Maybe<Scalars['String']['output']>;
  mediaOrientation?: Maybe<MediaOrientation>;
  stepBodyOrientation?: Maybe<StepBodyOrientation>;
  verticalMediaAlignment?: Maybe<VerticalMediaAlignment>;
  verticalMediaOrientation?: Maybe<VerticalMediaOrientation>;
};

/** Account and account user targeting */
export type CommonTargeting = {
  __typename?: 'CommonTargeting';
  account: IntegrationTargetingSegment;
  accountUser: IntegrationTargetingSegment;
};

/** The position of the context tag relative to the tagged element */
export enum ContextualTagAlignmentEnumType {
  BottomLeft = 'bottom_left',
  BottomRight = 'bottom_right',
  CenterLeft = 'center_left',
  CenterRight = 'center_right',
  TopLeft = 'top_left',
  TopRight = 'top_right'
}

/** The position of the context tag's tooltip relative to the tag */
export enum ContextualTagTooltipAlignmentEnumType {
  Bottom = 'bottom',
  Left = 'left',
  Right = 'right',
  Top = 'top'
}

/** The style of the context tag */
export enum ContextualTagTypeEnumType {
  Badge = 'badge',
  BadgeDot = 'badge_dot',
  BadgeIcon = 'badge_icon',
  Dot = 'dot',
  Highlight = 'highlight',
  Icon = 'icon'
}

export enum CtasOrientation {
  Inline = 'inline',
  Left = 'left',
  Right = 'right',
  SpaceBetween = 'spaceBetween'
}

/** The org cta styles */
export type CtasStyleStyleType = {
  __typename?: 'CtasStyleStyleType';
  borderRadius?: Maybe<Scalars['Int']['output']>;
  fontSize?: Maybe<Scalars['Int']['output']>;
  lineHeight?: Maybe<Scalars['Int']['output']>;
  paddingX?: Maybe<Scalars['Int']['output']>;
  paddingY?: Maybe<Scalars['Int']['output']>;
};

/** Health status of a particular diagnostics category */
export enum DiagnosticStateEnum {
  Critical = 'critical',
  Healthy = 'healthy',
  NoData = 'noData',
  Warning = 'warning'
}

export type DropdownInputOption = {
  __typename?: 'DropdownInputOption';
  label?: Maybe<Scalars['String']['output']>;
  value?: Maybe<Scalars['String']['output']>;
};

/** The variation for an input of type dropdown */
export enum DropdownInputVariationEnumType {
  Cards = 'cards',
  Dropdown = 'dropdown'
}

export type DropdownSettings = {
  __typename?: 'DropdownSettings';
  helperText?: Maybe<Scalars['String']['output']>;
  multiSelect: Scalars['Boolean']['output'];
  options: Array<DropdownInputOption>;
  required: Scalars['Boolean']['output'];
  variation: DropdownInputVariationEnumType;
};

/** The behavior of the sidebar toggle */
export enum EmbedToggleBehaviorType {
  Default = 'default',
  Persist = 'persist',
  ResourceCenter = 'resource_center'
}

/** Type of event to listen for */
export enum EventHookTypeEnum {
  All = 'all',
  GuideCompleted = 'guideCompleted',
  GuideViewed = 'guideViewed',
  Ping = 'ping',
  StepCompleted = 'stepCompleted',
  StepViewed = 'stepViewed'
}

/** A guide used in an customer account journey */
export type FileUpload = {
  __typename?: 'FileUpload';
  /** The account user that uploaded this file */
  accountUser?: Maybe<AccountUser>;
  createdAt: Scalars['DateTime']['output'];
  entityId: Scalars['EntityId']['output'];
  /** The name of the file */
  filename: Scalars['String']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** The original filename of the file */
  originalFilename: Scalars['String']['output'];
  /** The account users that are participating in this guide */
  participants: Array<AccountUser>;
  /** The step in which this file was uploaded */
  step: Step;
  /** The url of the file */
  url?: Maybe<Scalars['String']['output']>;
};

export type FormFactorStyle = BannerStyle | CardStyle | CarouselStyle | ChecklistStyle | ModalStyle | TooltipStyle | VideoGalleryStyle;

/** A guide used in an customer account journey */
export type Guide = {
  __typename?: 'Guide';
  /** The account to which the guide belongs */
  account: Account;
  /** @deprecated use formFactor */
  allowedEmbedType?: Maybe<GuideAllowedEmbedTypeEnumType>;
  /** The timestamp of when the guide was completed */
  completedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The number of completed steps in the guide */
  completedStepsCount: Scalars['Int']['output'];
  /** The percentage of steps completed in this guide */
  completionPercentage: Scalars['Int']['output'];
  /** The completion state of the guide */
  completionState?: Maybe<GuideCompletionState>;
  createdFromGuideBase?: Maybe<GuideBase>;
  /** The entity ID of the template from which this guide was created */
  createdFromTemplate?: Maybe<Template>;
  /** A description of the guide */
  description?: Maybe<Scalars['String']['output']>;
  /** The design type of the guide */
  designType: GuideDesignTypeEnumType;
  entityId: Scalars['EntityId']['output'];
  /** The first incomplete step for this guide */
  firstIncompleteStep?: Maybe<Scalars['EntityId']['output']>;
  /** The form factor this guide is meant to display as. */
  formFactor?: Maybe<GuideFormFactorEnumType>;
  /** Style properties for this guides form factor */
  formFactorStyle?: Maybe<FormFactorStyle>;
  /** The guide modules that belongs to the guide */
  guideModules: Array<GuideModule>;
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** Whether this guide is CYOA (single step guide that branches to another guide) */
  isCyoa?: Maybe<Scalars['Boolean']['output']>;
  /** Whether this guide is a side quest or a main quest. */
  isSideQuest?: Maybe<Scalars['Boolean']['output']>;
  /** The timestamp of the last activity made on the guide */
  lastActiveAt?: Maybe<Scalars['DateTime']['output']>;
  lastCompletedStep?: Maybe<Step>;
  /** The name of the guide */
  name: Scalars['String']['output'];
  /** The type of page targeting mechanism */
  pageTargetingType: GuidePageTargetingEnumType;
  /** The URL for side quests page targeting, if enabled */
  pageTargetingUrl?: Maybe<Scalars['String']['output']>;
  /** The account users that are participating in this guide */
  participants: Array<AccountUser>;
  /** The current activeness state of the guide */
  state: GuideState;
  /** The number of completed steps in the guide */
  stepsCount: Scalars['Int']['output'];
  /** The theme for this guide */
  theme: ThemeType;
  type: GuideTypeEnumType;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

/** The embed type (e.g. inline or sidebar) the guide should be restricted to, if any. */
export enum GuideAllowedEmbedTypeEnumType {
  Inline = 'inline',
  Sidebar = 'sidebar'
}

/** A guide base from which guide instances can be created */
export type GuideBase = {
  __typename?: 'GuideBase';
  /** The account associated with the guide base */
  account: Account;
  /** The account-based onboarding guide created if the guide base is an "account" type */
  accountGuide?: Maybe<Guide>;
  /** When the guide base was activated/launched */
  activatedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The average completion percentage across all instances of this guide */
  averageCompletionPercentage: Scalars['Float']['output'];
  averageStepsCompleted: Scalars['Int']['output'];
  averageStepsViewed: Scalars['Int']['output'];
  /** The entity ID of the template from which this guide base was created */
  createdFromTemplate?: Maybe<Template>;
  /**
   * CTA clicked information for announcement type guide bases, if available
   * @deprecated Use usersClickedCta instead
   */
  ctasClicked?: Maybe<Scalars['Int']['output']>;
  /** A description of the guide base */
  description?: Maybe<Scalars['String']['output']>;
  /** The design type of the guide */
  designType: GuideDesignTypeEnumType;
  entityId: Scalars['EntityId']['output'];
  /**
   * The file uploads uploaded as part of this GuideBase
   * @deprecated Scheduled to be removed
   */
  fileUploads: Array<FileUpload>;
  /** The form factor this guide is meant to display as. */
  formFactor?: Maybe<GuideFormFactorEnumType>;
  /** Style properties for this guides form factor */
  formFactorStyle?: Maybe<FormFactorStyle>;
  /** The guide modules that belongs to the guide */
  guideModuleBases: Array<GuideModuleBase>;
  /** The guides created from the guide base */
  guides: Array<Guide>;
  /**
   * Does this guide base have any file uploads associated with it
   * @deprecated Scheduled to be removed
   */
  hasFileUploads: Scalars['Boolean']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** Whether this guide is CYOA (single step guide that branches to another guide) */
  isCyoa: Scalars['Boolean']['output'];
  /** Wether the guide-base content was directly modified */
  isModifiedFromTemplate: Scalars['Boolean']['output'];
  /** Whether this guide is a side quest or a main quest. */
  isSideQuest?: Maybe<Scalars['Boolean']['output']>;
  /** Whether or not active split tests are targeting this template */
  isTargetedForSplitTesting: SplitTestStateEnumType;
  /** The last time the guide base was active by a user */
  lastActiveAt?: Maybe<Scalars['DateTime']['output']>;
  /** The last completed step in any of the guides created from this guide base */
  lastCompletedStep?: Maybe<Step>;
  /** The name of the guide base */
  name?: Maybe<Scalars['String']['output']>;
  /** When this guide base was made obsolete due to targeting no longer matching */
  obsoletedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The type of page targeting mechanism */
  pageTargetingType: GuidePageTargetingEnumType;
  /** The URL for side quests page targeting, if enabled */
  pageTargetingUrl?: Maybe<Scalars['String']['output']>;
  /** The account users who have been assigned to a guide in the guide base */
  participants: Array<AccountUser>;
  /** The account users active in this guide */
  participantsCount: Scalars['Int']['output'];
  /**
   * The account users active in this guide who have ALSO viewed the guide
   * @deprecated Same as usersViewedAStep
   */
  participantsWhoViewed: Array<AccountUser>;
  /** The count of participants in all instances of the guide base who have viewed the guide */
  participantsWhoViewedCount: Scalars['Int']['output'];
  /** The current activeness state of the guide base */
  state: GuideBaseState;
  stepsCompletedCount: Scalars['Int']['output'];
  /** The theme for this guide-base */
  theme: ThemeType;
  type: GuideTypeEnumType;
  /** Distinct users that clicked a CTA */
  usersClickedCta?: Maybe<Scalars['Int']['output']>;
  /** Users who have completed a step within this guide base */
  usersCompletedAStep: Array<AccountUser>;
  usersCompletedAStepCount: Scalars['Int']['output'];
  /** Users who have viewed a step within this guide base */
  usersViewedAStep: Array<AccountUser>;
  /** Whether the guide was auto-launched */
  wasAutoLaunched: Scalars['Boolean']['output'];
};

/** The current activeness state of the guide */
export enum GuideBaseState {
  Active = 'active',
  Archived = 'archived',
  Draft = 'draft',
  Inactive = 'inactive',
  Obsoleted = 'obsoleted',
  Paused = 'paused'
}

export type GuideBaseStepAutoCompleteInteraction = {
  __typename?: 'GuideBaseStepAutoCompleteInteraction';
  elementSelector: Scalars['String']['output'];
  entityId: Scalars['EntityId']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  step: GuideStepBase;
  type: StepAutoCompleteInteractionTypeEnumType;
  url: Scalars['String']['output'];
  wildcardUrl: Scalars['String']['output'];
};

export type GuideBaseStepCta = {
  __typename?: 'GuideBaseStepCta';
  /** The step prototype CTA that this CTA comes from */
  createdFromStepPrototypeCta?: Maybe<StepPrototypeCta>;
  /** @deprecated Use destinationGuideObj */
  destinationGuide?: Maybe<Scalars['String']['output']>;
  destinationGuideObj?: Maybe<Template>;
  entityId: Scalars['EntityId']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** Index that indicates the order for ctas. */
  orderIndex: Scalars['Int']['output'];
  /** The settings of the step CTA */
  settings?: Maybe<StepCtaSettingsType>;
  step: GuideStepBase;
  style: StepCtaStyleEnumType;
  text: Scalars['String']['output'];
  type: StepCtaTypeEnumType;
  url?: Maybe<Scalars['String']['output']>;
};

export type GuideBaseStepTaggedElement = {
  __typename?: 'GuideBaseStepTaggedElement';
  alignment: ContextualTagAlignmentEnumType;
  elementSelector: Scalars['String']['output'];
  entityId: Scalars['EntityId']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  relativeToText: Scalars['Boolean']['output'];
  style?: Maybe<VisualTagStyleSettings>;
  tooltipAlignment: ContextualTagTooltipAlignmentEnumType;
  type: ContextualTagTypeEnumType;
  url: Scalars['String']['output'];
  wildcardUrl: Scalars['String']['output'];
  xOffset: Scalars['Int']['output'];
  yOffset: Scalars['Int']['output'];
};

/** The completion state of the guide */
export enum GuideCompletionState {
  Complete = 'complete',
  Done = 'done',
  Incomplete = 'incomplete'
}

/** The design type of this guide. */
export enum GuideDesignTypeEnumType {
  Announcement = 'announcement',
  Everboarding = 'everboarding',
  Onboarding = 'onboarding'
}

/** Criteria based on which to expire guides */
export enum GuideExpirationCriteria {
  Launch = 'launch',
  Never = 'never',
  StepCompletion = 'step_completion'
}

/** The form factor this guide is meant to display as. */
export enum GuideFormFactorEnumType {
  Banner = 'banner',
  Flow = 'flow',
  Inline = 'inline',
  InlineSidebar = 'inline_sidebar',
  Modal = 'modal',
  Sidebar = 'sidebar',
  Tooltip = 'tooltip'
}

/** Header close icon */
export enum GuideHeaderCloseIconType {
  DownArrow = 'downArrow',
  Minimize = 'minimize',
  X = 'x'
}

/** Header progress bar style */
export enum GuideHeaderProgressBarType {
  Continuous = 'continuous',
  Sections = 'sections'
}

/** Guide header settings */
export type GuideHeaderSettingsType = {
  __typename?: 'GuideHeaderSettingsType';
  closeIcon: GuideHeaderCloseIconType;
  progressBar?: Maybe<GuideHeaderProgressBarType>;
  showModuleNameInStepView: Scalars['Boolean']['output'];
  type: GuideHeaderStyleType;
};

/** Header base style */
export enum GuideHeaderStyleType {
  Bright = 'bright',
  Classic = 'classic',
  Simple = 'simple',
  Striped = 'striped'
}

/** A module that exists within a guide */
export type GuideModule = {
  __typename?: 'GuideModule';
  /** The module from which this guide module was created */
  createdFromModule?: Maybe<Module>;
  entityId: Scalars['EntityId']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /**
   * The name of the guide module
   * @deprecated Use `name` from `GuideModuleBase` instead
   */
  name: Scalars['String']['output'];
  /** The index of the guide module within the guide */
  orderIndex: Scalars['Int']['output'];
  /** The steps belong to this guide module */
  steps: Array<Step>;
};

/** A module that exists within a guide base */
export type GuideModuleBase = {
  __typename?: 'GuideModuleBase';
  /** When was the guide module base dynamically added */
  addedDynamicallyAt?: Maybe<Scalars['DateTime']['output']>;
  /** The module from which this guide module was created */
  createdFromModule?: Maybe<Module>;
  /** The step that dynamically added this guide module base */
  dynamicallyAddedByStep?: Maybe<Step>;
  entityId: Scalars['EntityId']['output'];
  /** The step bases belong to this guide module base */
  guideStepBases: Array<GuideStepBase>;
  hasBranchingStep?: Maybe<Scalars['Boolean']['output']>;
  hasInputStep?: Maybe<Scalars['Boolean']['output']>;
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** The name of the guide module base */
  name: Scalars['String']['output'];
  /** The index of the guide module within the guide */
  orderIndex: Scalars['Int']['output'];
  /** The account users who have been assigned to a guide module in the guide module base */
  participants: Array<AccountUser>;
  /** The count of account users who have been assigned to a guide module in the guide module base */
  participantsCount: Scalars['Int']['output'];
  /** The account users active in this guide module who have ALSO viewed the guide module */
  participantsWhoViewed: Array<AccountUser>;
  /** The count of participants in all instances of the guide module base who have viewed the guide module */
  participantsWhoViewedCount: Scalars['Int']['output'];
  /** Whether the guide module base should be added to a guide dynamically or not */
  shouldOnlyAddToNewGuidesDynamically: Scalars['Boolean']['output'];
};

/** The type of page targeting mechanism */
export enum GuidePageTargetingEnumType {
  AnyPage = 'any_page',
  Inline = 'inline',
  SpecificPage = 'specific_page',
  VisualTag = 'visual_tag'
}

/** The current activeness state of the guide */
export enum GuideState {
  Active = 'active',
  Draft = 'draft',
  Expired = 'expired',
  Inactive = 'inactive'
}

/** A step that exists within a guide base */
export type GuideStepBase = {
  __typename?: 'GuideStepBase';
  /** The auto complete interaction of a step */
  autoCompleteInteraction?: Maybe<GuideBaseStepAutoCompleteInteraction>;
  /** The descriptive text of the step */
  body?: Maybe<Scalars['String']['output']>;
  /** The Slate.JS RTE representation of the Step body */
  bodySlate?: Maybe<Scalars['JSON']['output']>;
  branchingChoices?: Maybe<Array<BranchingChoice>>;
  branchingDismissDisabled?: Maybe<Scalars['Boolean']['output']>;
  branchingFormFactor?: Maybe<BranchingFormFactorEnumType>;
  branchingKey?: Maybe<Scalars['String']['output']>;
  branchingMultiple?: Maybe<Scalars['Boolean']['output']>;
  branchingPaths?: Maybe<Array<BranchingPath>>;
  branchingQuestion?: Maybe<Scalars['String']['output']>;
  /** The number of account users who have viewed this guide step base */
  countUsersViewed: Scalars['Int']['output'];
  /** The step prototype that this guide step base comes from */
  createdFromStepPrototype?: Maybe<StepPrototype>;
  /** The CTAs of a step */
  ctas: Array<GuideBaseStepCta>;
  dismissLabel?: Maybe<Scalars['String']['output']>;
  entityId: Scalars['EntityId']['output'];
  /** Files that have been uploaded in steps created from this guide step base */
  fileUploads: Array<FileUpload>;
  /** Does the guide step base have any file uploads */
  hasFileUploads: Scalars['Boolean']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** The input prototypes of a step */
  inputs: Array<InputStepBase>;
  /** Can the step be completed via auto completion */
  isAutoCompletable: Scalars['Boolean']['output'];
  /** Wether an auto complete step can be manually completed. */
  manualCompletionDisabled: Scalars['Boolean']['output'];
  /** The media references associated to this step. */
  mediaReferences: Array<MediaReference>;
  /** The name of the step */
  name: Scalars['String']['output'];
  orderIndex: Scalars['Int']['output'];
  /** The percentage of users who have completed the guide step base */
  percentageCompleted: Scalars['Float']['output'];
  /** Whether or not step is required, optional, fyi, etc... */
  stepType: StepTypeEnum;
  /**
   * The step instances that were created from this guide step base
   * @deprecated Should not be used due to performance concerns. Is likely to be removed.
   */
  steps: Array<Step>;
  taggedElements: Array<GuideBaseStepTaggedElement>;
  updatedAt: Scalars['DateTime']['output'];
  /** A list of account users who completed this guide step base */
  usersCompleted: Array<AccountUser>;
  /** A list of account users who viewed this guide step base */
  usersViewed: Array<AccountUser>;
};

/** The scope of the created guide template */
export enum GuideTypeEnumType {
  Account = 'account',
  SplitTest = 'split_test',
  Template = 'template',
  User = 'user'
}

export type HelpCenter = {
  __typename?: 'HelpCenter';
  issueSubmission?: Maybe<Scalars['Boolean']['output']>;
  kbSearch?: Maybe<Scalars['Boolean']['output']>;
  liveChat?: Maybe<Scalars['Boolean']['output']>;
  source: HelpCenterSource;
  targeting?: Maybe<CommonTargeting>;
  url?: Maybe<Scalars['String']['output']>;
};

/** The help center used by the org */
export enum HelpCenterSource {
  Helpscout = 'helpscout',
  Intercom = 'intercom',
  Salesforce = 'salesforce',
  Zendesk = 'zendesk'
}

export type HelpCenterStyle = {
  __typename?: 'HelpCenterStyle';
  chatTitle?: Maybe<Scalars['String']['output']>;
  supportTicketTitle?: Maybe<Scalars['String']['output']>;
};

export enum HorizontalMediaAlignment {
  Center = 'center',
  Left = 'left',
  Right = 'right'
}

export type ImageMediaMeta = {
  __typename?: 'ImageMediaMeta';
  naturalHeight?: Maybe<Scalars['Int']['output']>;
  naturalWidth?: Maybe<Scalars['Int']['output']>;
};

export type ImageMediaReferenceSettings = {
  __typename?: 'ImageMediaReferenceSettings';
  alignment?: Maybe<Scalars['String']['output']>;
  fill?: Maybe<Scalars['String']['output']>;
  hyperlink?: Maybe<Scalars['String']['output']>;
  lightboxDisabled?: Maybe<Scalars['Boolean']['output']>;
};

/** The Inline contextual style */
export type InlineContextualStyleType = {
  __typename?: 'InlineContextualStyleType';
  borderColor?: Maybe<Scalars['String']['output']>;
  borderRadius: Scalars['Int']['output'];
  padding: Scalars['Int']['output'];
  shadow: InlineContextualType;
};

/** The box shadow for inline contextual guides */
export enum InlineContextualType {
  None = 'none',
  Standard = 'standard'
}

/** Alignment of the injected inline */
export enum InlineEmbedAlignment {
  Center = 'center',
  Left = 'left',
  Right = 'right'
}

/** The position where the inline should be injected relative to the selected element */
export enum InlineEmbedPosition {
  After = 'after',
  Before = 'before',
  Inside = 'inside'
}

/** The launched state of the inline embed */
export enum InlineEmbedState {
  Active = 'active',
  Inactive = 'inactive'
}

/** Account and account user targeting for inline embeds */
export type InlineEmbedTargeting = {
  __typename?: 'InlineEmbedTargeting';
  account: InlineEmbedTargetingSegment;
  accountUser: InlineEmbedTargetingSegment;
};

/** An inline embed targeting attribute rule */
export type InlineEmbedTargetingRule = {
  __typename?: 'InlineEmbedTargetingRule';
  attribute: Scalars['String']['output'];
  ruleType: TargetAttributeRuleRuleTypeEnumType;
  value: Scalars['TargetAttributeRuleFields']['output'];
  valueType: AttributeValueType;
};

/** Inline embed targeting segment */
export type InlineEmbedTargetingSegment = {
  __typename?: 'InlineEmbedTargetingSegment';
  grouping?: Maybe<Scalars['String']['output']>;
  rules?: Maybe<Array<Maybe<InlineEmbedTargetingRule>>>;
  type: InlineEmbedTargetingType;
};

/** The rule type of rules for an inline embed */
export enum InlineEmbedTargetingType {
  All = 'all',
  AttributeRules = 'attribute_rules',
  Role = 'role'
}

/** The inline behaviour when no onboarding guides are available */
export enum InlineEmptyBehaviourType {
  Hide = 'hide',
  Show = 'show'
}

export type InputSettings = DropdownSettings | NpsSettings | NumberPollSettings | TextOrEmailSettings;

/** An input base that belongs to a guide step base */
export type InputStepBase = {
  __typename?: 'InputStepBase';
  entityId: Scalars['EntityId']['output'];
  /** The guide step base to which this input base belongs to */
  guideStepBase: GuideStepBase;
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** Label for the input */
  label: Scalars['String']['output'];
  /** Index that indicates the order of the input */
  orderIndex: Scalars['Int']['output'];
  /** Settings for the input according to its type */
  settings?: Maybe<InputSettings>;
  /** Type of the input */
  type: InputStepFieldTypeEnumType;
};

/** The type of the input prototype */
export enum InputStepFieldTypeEnumType {
  Date = 'date',
  Dropdown = 'dropdown',
  Email = 'email',
  Nps = 'nps',
  NumberPoll = 'numberPoll',
  Paragraph = 'paragraph',
  Text = 'text'
}

/** An input prototype that belongs to a step prototype */
export type InputStepPrototype = {
  __typename?: 'InputStepPrototype';
  entityId: Scalars['EntityId']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** Label for the input */
  label: Scalars['String']['output'];
  /** Index that indicates the order of the input */
  orderIndex: Scalars['Int']['output'];
  /** Settings for the input according to its type */
  settings?: Maybe<InputSettings>;
  /** The step prototype to which this input prototype belongs to */
  stepPrototype: StepPrototype;
  /** Type of the input */
  type: InputStepFieldTypeEnumType;
};

export type IntegrationApiKey = {
  __typename?: 'IntegrationApiKey';
  entityId: Scalars['EntityId']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** The time of first successful integration */
  integratedAt?: Maybe<Scalars['DateTime']['output']>;
  issueSubmission?: Maybe<Scalars['Boolean']['output']>;
  kbSearch?: Maybe<Scalars['Boolean']['output']>;
  /** The API key for the organization to connect to the integration */
  key: Scalars['String']['output'];
  /** For scheduled integrations, last time it ran automatically */
  lastRunAt?: Maybe<Scalars['DateTime']['output']>;
  /** The organization that the Segment API key belongs to */
  organization: Organization;
  state: IntegrationStateEnum;
  /**
   * If this particular integration specifically should be targeted to certain segments
   * @deprecated Not in use, to potentially be revisited later.
   */
  targeting: TargetsType;
  /** @deprecated We should no longer store two states in one key */
  twoWayState?: Maybe<TwoWayState>;
  type?: Maybe<IntegrationTypeEnum>;
  zendeskState?: Maybe<ZendeskState>;
};

export enum IntegrationStateEnum {
  Active = 'active',
  Inactive = 'inactive'
}

/** An integration targeting attribute rule */
export type IntegrationTargetingRule = {
  __typename?: 'IntegrationTargetingRule';
  attribute: Scalars['String']['output'];
  ruleType: TargetAttributeRuleRuleTypeEnumType;
  value: Scalars['TargetAttributeRuleFields']['output'];
  valueType: AttributeValueType;
};

/** Integration targeting segment */
export type IntegrationTargetingSegment = {
  __typename?: 'IntegrationTargetingSegment';
  grouping?: Maybe<Scalars['String']['output']>;
  rules?: Maybe<Array<Maybe<IntegrationTargetingRule>>>;
  type: IntegrationTargetingType;
};

/** The rule type of rules for an integration */
export enum IntegrationTargetingType {
  All = 'all',
  AttributeRules = 'attribute_rules',
  Role = 'role'
}

/** What integration this key is for */
export enum IntegrationTypeEnum {
  Zendesk = 'zendesk'
}

export type Media = {
  __typename?: 'Media';
  entityId: Scalars['EntityId']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  meta: MediaMetaType;
  type: MediaTypeEnumType;
  url: Scalars['String']['output'];
};

/** The media reference settings */
export type MediaMetaType = ImageMediaMeta | NumberAttributeMediaMeta | VideoMediaMeta;

export enum MediaOrientation {
  Left = 'left',
  Right = 'right'
}

export type MediaReference = {
  __typename?: 'MediaReference';
  entityId: Scalars['EntityId']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** The media associated to this record. */
  media: Media;
  mediaId: Scalars['Int']['output'];
  orderIndex: Scalars['Int']['output'];
  referenceId: Scalars['Int']['output'];
  referenceType: MediaReferenceTypeEnumType;
  settings: MediaReferenceSettingsType;
};

/** The media reference settings */
export type MediaReferenceSettingsType = ImageMediaReferenceSettings | NumberAttributeMediaReferenceSettings | VideoMediaReferenceSettings;

/** The type of a media reference */
export enum MediaReferenceTypeEnumType {
  StepPrototype = 'step_prototype'
}

/** The type of a media element */
export enum MediaTypeEnumType {
  Image = 'image',
  NumberAttribute = 'number_attribute',
  Video = 'video'
}

export enum ModalPosition {
  BottomLeft = 'bottom_left',
  BottomRight = 'bottom_right',
  Center = 'center',
  TopLeft = 'top_left',
  TopRight = 'top_right'
}

export enum ModalSize {
  Large = 'large',
  Medium = 'medium',
  Small = 'small'
}

export type ModalStyle = {
  __typename?: 'ModalStyle';
  backgroundColor?: Maybe<Scalars['String']['output']>;
  canDismiss?: Maybe<Scalars['Boolean']['output']>;
  ctasOrientation?: Maybe<CtasOrientation>;
  hasBackgroundOverlay: Scalars['Boolean']['output'];
  height?: Maybe<Scalars['Int']['output']>;
  horizontalMediaAlignment?: Maybe<HorizontalMediaAlignment>;
  imageWidth?: Maybe<Scalars['String']['output']>;
  mediaFontSize?: Maybe<Scalars['Int']['output']>;
  mediaOrientation?: Maybe<MediaOrientation>;
  mediaTextColor?: Maybe<Scalars['String']['output']>;
  modalSize: ModalSize;
  position: ModalPosition;
  stepBodyOrientation?: Maybe<StepBodyOrientation>;
  textColor?: Maybe<Scalars['String']['output']>;
  verticalMediaAlignment?: Maybe<VerticalMediaAlignment>;
  verticalMediaOrientation?: Maybe<VerticalMediaOrientation>;
};

/** The org modals styles */
export type ModalsStyleStyleType = {
  __typename?: 'ModalsStyleStyleType';
  backgroundOverlayColor?: Maybe<Scalars['String']['output']>;
  backgroundOverlayOpacity?: Maybe<Scalars['Int']['output']>;
  borderRadius?: Maybe<Scalars['Int']['output']>;
  paddingX?: Maybe<Scalars['Int']['output']>;
  paddingY?: Maybe<Scalars['Int']['output']>;
  shadow?: Maybe<AnnouncementShadowType>;
};

/** A standalone module of steps */
export type Module = {
  __typename?: 'Module';
  /** The description of the module */
  description?: Maybe<Scalars['String']['output']>;
  /**
   * The title displayed in the guides created from the module.
   * @deprecated Use `name` instead
   */
  displayTitle?: Maybe<Scalars['String']['output']>;
  /** The templates in which this module is added to dynamically */
  dynamicTemplates: Array<Template>;
  entityId: Scalars['EntityId']['output'];
  hasBranchingStep?: Maybe<Scalars['Boolean']['output']>;
  hasInputStep?: Maybe<Scalars['Boolean']['output']>;
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** Whether this step group is CYOA */
  isCyoa?: Maybe<Scalars['Boolean']['output']>;
  /** If this module is appended dynamically to anything */
  isDynamic?: Maybe<Scalars['Boolean']['output']>;
  /** Indicates whether the module is empty based on step body content */
  isEmpty: Scalars['Boolean']['output'];
  lastEdited?: Maybe<TemplateLastEdited>;
  /** When was the module was last used */
  lastUsedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The name of the module */
  name?: Maybe<Scalars['String']['output']>;
  /** The number of accounts with unmodified guides created from this template */
  numberOfAccountsWithUnmodifiedGuides: Scalars['Int']['output'];
  /** How many guides this will eventually touch */
  propagationCount: Scalars['Int']['output'];
  /** Number of pending propagation jobs as a result of saving */
  propagationQueue: Scalars['Int']['output'];
  /** The step prototypes included as part of this module */
  stepPrototypes: Array<StepPrototype>;
  /** Rules for dynamic module targeting */
  targetingData: Array<ModuleTargetingData>;
  /** The templates in which this module is being used */
  templates: Array<Template>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

/** An autolaunch rule for a module */
export type ModuleAutoLaunchRule = {
  __typename?: 'ModuleAutoLaunchRule';
  entityId: Scalars['EntityId']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  module: Module;
  /** What type of rule is the auto launch rule */
  ruleType: ModuleRuleType;
  /** The account user targeting rules, if the targetType is "attributeRules" */
  rules: Array<Scalars['JSON']['output']>;
};

export enum ModuleRuleType {
  AttributeRules = 'attribute_rules'
}

export type ModuleTargetingData = {
  __typename?: 'ModuleTargetingData';
  autoLaunchRules: Array<ModuleAutoLaunchRule>;
  /** EntityId of the targeted template */
  targetTemplate: Scalars['String']['output'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Update an existing visual builder session */
  updateVisualBuilderSession?: Maybe<UpdateVisualBuilderSessionPayload>;
};


export type MutationUpdateVisualBuilderSessionArgs = {
  input: UpdateVisualBuilderSessionInput;
};

export type NpsSettings = {
  __typename?: 'NpsSettings';
  helperText?: Maybe<Scalars['String']['output']>;
  /** @deprecated Value is not editable */
  maxLabel?: Maybe<Scalars['String']['output']>;
  /** @deprecated Value is not editable */
  maxValue?: Maybe<Scalars['Int']['output']>;
  /** @deprecated Value is not editable */
  minLabel?: Maybe<Scalars['String']['output']>;
  /** @deprecated Value is not editable */
  minValue?: Maybe<Scalars['Int']['output']>;
  required: Scalars['Boolean']['output'];
};

export type NumberAttributeMediaMeta = {
  __typename?: 'NumberAttributeMediaMeta';
  _?: Maybe<Scalars['Boolean']['output']>;
};

export type NumberAttributeMediaReferenceSettings = {
  __typename?: 'NumberAttributeMediaReferenceSettings';
  _?: Maybe<Scalars['Boolean']['output']>;
};

export type NumberPollSettings = {
  __typename?: 'NumberPollSettings';
  helperText?: Maybe<Scalars['String']['output']>;
  maxLabel?: Maybe<Scalars['String']['output']>;
  maxValue?: Maybe<Scalars['Int']['output']>;
  minLabel?: Maybe<Scalars['String']['output']>;
  minValue?: Maybe<Scalars['Int']['output']>;
  required: Scalars['Boolean']['output'];
};

export type OnGuideCompletion = {
  __typename?: 'OnGuideCompletion';
  interactionType?: Maybe<AutoCompleteInteractionType>;
  templateEntityId: Scalars['String']['output'];
};

export type OrgDiagnostics = {
  __typename?: 'OrgDiagnostics';
  /** There is only one account, indicating possible hard-coding */
  hardCodedAccounts?: Maybe<DiagnosticStateEnum>;
  /** There is only one user, indicating possible hard-coding */
  hardCodedUsers?: Maybe<DiagnosticStateEnum>;
  /** Account users have recommended base attributes */
  hasRecommendedAttributes?: Maybe<DiagnosticStateEnum>;
  /** Attributes change data type */
  inconsistentTypes?: Maybe<DiagnosticStateEnum>;
  /** Dates are passed in non-ISO format */
  nonIsoDates?: Maybe<DiagnosticStateEnum>;
  /** If we have received a ping from their snippet */
  successfulInitialization?: Maybe<DiagnosticStateEnum>;
  /** Account user ids do not look like hard-coded emails */
  validAccountUserIds?: Maybe<DiagnosticStateEnum>;
};

/** Level of service this org is paying for */
export enum OrgPlan {
  Custom = 'Custom',
  Growth = 'Growth',
  Scale = 'Scale',
  Starter = 'Starter'
}

export type Organization = {
  __typename?: 'Organization';
  /** The accounts belonging to the organization */
  accounts: Array<Account>;
  /** The accounts count within the organization */
  accountsCount: Scalars['Float']['output'];
  /** [TEMP] The guide that is currently active this organization in a Chrome extension */
  activeGuide?: Maybe<Guide>;
  allottedGuides?: Maybe<Scalars['Int']['output']>;
  /** Indicates whether any of the given list of entities are currently being reset */
  areEntitiesResetting?: Maybe<Scalars['Boolean']['output']>;
  /** For use with Bento native API */
  bentoApiKey?: Maybe<SegmentApiKey>;
  /** The branching questions in the organization */
  branchingQuestions: Array<BranchingQuestion>;
  /** If we need to limit the ability to consecutively propagate */
  controlSyncing?: Maybe<Scalars['Boolean']['output']>;
  createdAt: Scalars['DateTime']['output'];
  /** Diagnostics for an org. Must specify keys to load data */
  diagnostics?: Maybe<OrgDiagnostics>;
  /** The domain of the organization */
  domain?: Maybe<Scalars['String']['output']>;
  /** Features enabled for this organization */
  enabledFeatureFlags: Array<Scalars['String']['output']>;
  entityId: Scalars['EntityId']['output'];
  /** Determine if the org domain has Google SSO enabled. */
  googleSSOEnabled: Scalars['Boolean']['output'];
  /** The count of guide bases that have been viewed within the organization */
  guideBaseCount: Scalars['Int']['output'];
  hasAccountUsers?: Maybe<Scalars['Boolean']['output']>;
  hasAudiences?: Maybe<Scalars['Boolean']['output']>;
  /** Check all cached diagnostic states without specifying keys */
  hasDiagnosticWarnings: Scalars['Boolean']['output'];
  /** A list of integrations the org has */
  hasIntegrations?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** Whether or not the org has launched a guide base. */
  hasLaunchedGuides?: Maybe<Scalars['Boolean']['output']>;
  hostnames: Array<Scalars['String']['output']>;
  /** The ID of an object */
  id: Scalars['ID']['output'];
  inlineEmbeds?: Maybe<Array<Maybe<OrganizationInlineEmbed>>>;
  /** The name of the organization */
  name: Scalars['String']['output'];
  plan: OrgPlan;
  /** The unique slug identifying the organization */
  slug: Scalars['String']['output'];
  /** The current state of the org as a bento customer */
  state: OrganizationStateEnumType;
  taggedElementUrls: Array<Scalars['String']['output']>;
  /** The templates within the organization */
  templates: Array<Template>;
  /** The templates count within the organization */
  templatesCount: Scalars['Float']['output'];
  trialEndedAt?: Maybe<Scalars['DateTime']['output']>;
  trialStartedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The users in the organization */
  users: Array<User>;
  /** Retrieves a default URL for the visual builder entry page */
  visualBuilderDefaultUrl?: Maybe<Scalars['String']['output']>;
};


export type OrganizationAreEntitiesResettingArgs = {
  entityIds: Array<Scalars['EntityId']['input']>;
  resetLevel: ResetLevelEnumType;
};

export type OrganizationInlineEmbed = {
  __typename?: 'OrganizationInlineEmbed';
  alignment?: Maybe<InlineEmbedAlignment>;
  borderRadius: Scalars['Int']['output'];
  bottomMargin: Scalars['Int']['output'];
  elementSelector: Scalars['String']['output'];
  entityId: Scalars['EntityId']['output'];
  leftMargin: Scalars['Int']['output'];
  maxWidth?: Maybe<Scalars['Int']['output']>;
  padding: Scalars['Int']['output'];
  position: InlineEmbedPosition;
  rightMargin: Scalars['Int']['output'];
  state: InlineEmbedState;
  targeting: InlineEmbedTargeting;
  /** The template associated with this inline embed */
  template?: Maybe<Template>;
  topMargin: Scalars['Int']['output'];
  url: Scalars['String']['output'];
  wildcardUrl: Scalars['String']['output'];
};

/** General organization-wide settings */
export type OrganizationOrgSettings = {
  __typename?: 'OrganizationOrgSettings';
  bentoApiKey?: Maybe<SegmentApiKey>;
  /** Default URL for linking to guide participants for nudges and other emails */
  defaultUserNotificationURL?: Maybe<Scalars['String']['output']>;
  /** Default email address for notifications */
  fallbackCommentsEmail?: Maybe<Scalars['String']['output']>;
  integrationApiKeys?: Maybe<Array<IntegrationApiKey>>;
  /** The URL for the organization logo */
  logoUrl?: Maybe<Scalars['String']['output']>;
  /** Are guide participant email nudges enabled */
  sendAccountUserNudges?: Maybe<Scalars['Boolean']['output']>;
  /** Are guide notification settings enabled */
  sendEmailNotifications?: Maybe<Scalars['Boolean']['output']>;
  webhooks?: Maybe<Array<Webhook>>;
};

/** The current state of the org as a bento customer */
export enum OrganizationStateEnumType {
  Active = 'active',
  Inactive = 'inactive',
  Trial = 'trial'
}

/** /styles customizations */
export type OrganizationUiSettings = {
  __typename?: 'OrganizationUISettings';
  /** Additional branding colors of an org */
  additionalColors: Array<AdditionalColorsType>;
  allGuidesStyle: AllGuidesStyleType;
  /** The app container that the sidebar should change */
  appContainerIdentifier?: Maybe<Scalars['String']['output']>;
  /** The org banners styles */
  bannersStyle?: Maybe<BannersStyleStyleType>;
  /** The step separator borders and dividers color in HEX format */
  borderColor?: Maybe<Scalars['String']['output']>;
  /** The background color of cards in the embeddable for this organization */
  cardBackgroundColor: Scalars['String']['output'];
  /** The org cta styles */
  ctasStyle?: Maybe<CtasStyleStyleType>;
  /** The background hex color for CYOA guides */
  cyoaBackgroundColor?: Maybe<Scalars['String']['output']>;
  /** The background hex color for CYOA guide cards */
  cyoaOptionBackgroundColor?: Maybe<Scalars['String']['output']>;
  /** The border color of a CYOA card */
  cyoaOptionBorderColor: Scalars['String']['output'];
  /** The shadow of a CYOA card */
  cyoaOptionShadow: Scalars['String']['output'];
  /** The shadow of a CYOA card when hovered. */
  cyoaOptionShadowHover: Scalars['String']['output'];
  /** The text hex color for CYOA guides */
  cyoaTextColor?: Maybe<Scalars['String']['output']>;
  /** The embeddable background color of this organization */
  embedBackgroundHex?: Maybe<Scalars['String']['output']>;
  /** Custom CSS rules set by the organization */
  embedCustomCss?: Maybe<Scalars['String']['output']>;
  /** Determines the behavior of the sidebar toggle when clicked */
  embedToggleBehavior: EmbedToggleBehaviorType;
  /** The offset in pixels for the X anchor of floating components */
  floatingAnchorXOffset: Scalars['Float']['output'];
  /** The offset in pixels for the Y anchor of floating components */
  floatingAnchorYOffset: Scalars['Float']['output'];
  /** The embeddable font color of this organization */
  fontColorHex?: Maybe<Scalars['String']['output']>;
  /** Help center settings for the org */
  helpCenter?: Maybe<HelpCenter>;
  /** Help center styles for the org */
  helpCenterStyle: HelpCenterStyle;
  /** Whether the sidebar should be auto-injected on the customer's page */
  injectSidebar: Scalars['Boolean']['output'];
  /** The Inline contextual style */
  inlineContextualStyle?: Maybe<InlineContextualStyleType>;
  /** Determines the inline component behaviour when no onboarding guides are available */
  inlineEmptyBehaviour: InlineEmptyBehaviourType;
  /** Whether the CYOA guide cards background color is dark */
  isCyoaOptionBackgroundColorDark: Scalars['Boolean']['output'];
  /** Whether the toggles color is inverted of the organization */
  isEmbedToggleColorInverted?: Maybe<Scalars['Boolean']['output']>;
  /**
   * If the viewer has not seen the guide before and the sidebar is present, is the auto-open functionality disabled
   * @deprecated No longer an org setting, but dependent on user states
   */
  isSidebarAutoOpenOnFirstViewDisabled?: Maybe<Scalars['Boolean']['output']>;
  /** The org modals styles */
  modalsStyle?: Maybe<ModalsStyleStyleType>;
  /** The font size for step content in a guide */
  paragraphFontSize?: Maybe<Scalars['Float']['output']>;
  /** The line height for step content in a guide */
  paragraphLineHeight?: Maybe<Scalars['Float']['output']>;
  /** The primary brand color of this organization */
  primaryColorHex?: Maybe<Scalars['String']['output']>;
  /** Quick links defined by the org */
  quickLinks: Array<Maybe<QuickLink>>;
  /** The responsive settings for the embed in narrow containers */
  responsiveVisibility?: Maybe<ResponsiveVisibilityType>;
  /** The secondary brand color of this organization */
  secondaryColorHex?: Maybe<Scalars['String']['output']>;
  /** Determines if the sidebar is available to the user */
  sidebarAvailability: SidebarAvailabilityType;
  /** The sidebar background color of this organization */
  sidebarBackgroundColor: Scalars['String']['output'];
  /** URLs where the sidebar component shoud not appear */
  sidebarBlocklistedUrls: Array<Maybe<Scalars['String']['output']>>;
  /** The header settings for sidebars */
  sidebarHeader: GuideHeaderSettingsType;
  /** The sidebar side of the organization */
  sidebarSide?: Maybe<Scalars['String']['output']>;
  /** The style of the sidebar */
  sidebarStyle?: Maybe<Scalars['String']['output']>;
  /** Determines the sidebar visibility under specific conditions */
  sidebarVisibility: SidebarVisibilityType;
  /** Visual style of a completed step in the embeddable */
  stepCompletionStyle: Scalars['String']['output'];
  /** The Step separation style */
  stepSeparationStyle?: Maybe<StepSeparationStyleType>;
  /** The border radius for badge and icon type tags */
  tagBadgeIconBorderRadius?: Maybe<Scalars['Float']['output']>;
  /** The padding for badge and icon type tags */
  tagBadgeIconPadding?: Maybe<Scalars['Float']['output']>;
  /** The custom icon URL for icon type tags */
  tagCustomIconUrl?: Maybe<Scalars['String']['output']>;
  /** The size of dot type tags */
  tagDotSize?: Maybe<Scalars['Float']['output']>;
  /** The primary color for contextual tags */
  tagPrimaryColor?: Maybe<Scalars['String']['output']>;
  /** The pulse level for dot type tags */
  tagPulseLevel?: Maybe<VisualTagPulseLevelType>;
  /** The text color for contextual tags */
  tagTextColor?: Maybe<Scalars['String']['output']>;
  /** Determine the visibility behavior of visual tags */
  tagVisibility: TagVisibilityType;
  /** The guides themes for this organization */
  theme: ThemeType;
  /** The color used for the sidebar toggle button in HEX format */
  toggleColorHex?: Maybe<Scalars['String']['output']>;
  /** The toggle style of the organization */
  toggleStyle?: Maybe<Scalars['String']['output']>;
  /** The toggle text of the organization */
  toggleText?: Maybe<Scalars['String']['output']>;
  /** The color used for the sidebar text toggle button in HEX format */
  toggleTextColor: Scalars['String']['output'];
  /** The org tooltips styles */
  tooltipsStyle?: Maybe<TooltipsStyleStyleType>;
};

export type QuickLink = {
  __typename?: 'QuickLink';
  icon?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

/** Level at which guide reset applies */
export enum ResetLevelEnumType {
  Account = 'account',
  GuideBase = 'guide_base',
  Template = 'template'
}

export enum ResponsiveVisibilityBehaviorType {
  Hide = 'hide',
  Show = 'show'
}

/** The responsive settings for the embed in narrow containers */
export type ResponsiveVisibilityType = {
  __typename?: 'ResponsiveVisibilityType';
  all: ResponsiveVisibilityBehaviorType;
};

export type RootType = {
  __typename?: 'RootType';
  /** Attributes used for targeting */
  attributes: Array<Attribute>;
  /** Features enabled for this organization */
  enabledFeatureFlags: Array<Scalars['String']['output']>;
  findVisualBuilderSession?: Maybe<VisualBuilderSession>;
  organizationDomain?: Maybe<Scalars['String']['output']>;
  uiSettings?: Maybe<OrganizationUiSettings>;
};


export type RootTypeFindVisualBuilderSessionArgs = {
  entityId?: InputMaybe<Scalars['EntityId']['input']>;
};

export type SegmentApiKey = {
  __typename?: 'SegmentApiKey';
  entityId: Scalars['EntityId']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** The time of first successful integration */
  integratedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The API key for the organization to connect to Bento's segment integration */
  key: Scalars['String']['output'];
  /** The organization that the Segment API key belongs to */
  organization: Organization;
  type?: Maybe<BentoApiKeyTypeEnum>;
};

/** Whether or not the sidebar is available to users */
export enum SidebarAvailabilityType {
  Default = 'default',
  Hide = 'hide',
  NeverOpen = 'never_open'
}

/** The toggle visibility under specific conditions */
export enum SidebarVisibilityType {
  ActiveGuides = 'active_guides',
  ActiveOnboardingGuides = 'active_onboarding_guides',
  Hide = 'hide',
  Show = 'show'
}

export enum SplitTestStateEnumType {
  Deleted = 'deleted',
  Draft = 'draft',
  Live = 'live',
  None = 'none',
  Stopped = 'stopped'
}

/** A step that exists within a guide */
export type Step = {
  __typename?: 'Step';
  /** The auto complete interaction of a step */
  autoCompleteInteraction?: Maybe<StepAutoCompleteInteraction>;
  /**
   * The descriptive text of the step
   * @deprecated Maybe deprecate because it is not a case that exists anymore
   */
  body?: Maybe<Scalars['String']['output']>;
  /** The Slate.JS RTE representation of the Step body */
  bodySlate?: Maybe<Scalars['JSON']['output']>;
  branchingChoices?: Maybe<Array<BranchingChoice>>;
  branchingDismissDisabled?: Maybe<Scalars['Boolean']['output']>;
  branchingFormFactor?: Maybe<BranchingFormFactorEnumType>;
  branchingKey?: Maybe<Scalars['String']['output']>;
  branchingMultiple?: Maybe<Scalars['Boolean']['output']>;
  branchingQuestion?: Maybe<Scalars['String']['output']>;
  /** When was the step completed */
  completedAt?: Maybe<Scalars['DateTime']['output']>;
  completedByAccountUser?: Maybe<AccountUser>;
  /** What kind of entity triggered the step completion */
  completedByType?: Maybe<StepCompletedBy>;
  completedByUser?: Maybe<User>;
  /** The number of account users who have viewed this step */
  countUsersViewed: Scalars['Int']['output'];
  /** The step prototype that this step comes from */
  createdFromStepPrototype: StepPrototype;
  /** The CTAs of a step */
  ctas: Array<GuideBaseStepCta>;
  /** @deprecated not being used, might be removed */
  dismissLabel?: Maybe<Scalars['String']['output']>;
  entityId: Scalars['EntityId']['output'];
  /** Files that have been uploaded in steps created from this guide step base */
  fileUploads: Array<FileUpload>;
  guide?: Maybe<Guide>;
  /** Does the guide step base have any file uploads */
  hasFileUploads: Scalars['Boolean']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** Can the step be completed via auto completion */
  isAutoCompletable: Scalars['Boolean']['output'];
  /**
   * Whether the step has been marked as completed
   * @deprecated Use 'completedAt'
   */
  isComplete: Scalars['Boolean']['output'];
  /** Wether an auto complete step can be manually completed. */
  manualCompletionDisabled: Scalars['Boolean']['output'];
  /** The media references associated to this step. */
  mediaReferences: Array<MediaReference>;
  /** The name of the step */
  name: Scalars['String']['output'];
  /** The step that comes after */
  nextStep?: Maybe<Step>;
  orderIndex: Scalars['Int']['output'];
  /** Whether or not step is required, optional, fyi, etc... */
  stepType: StepTypeEnum;
  updatedAt: Scalars['DateTime']['output'];
  /** A list of account users who skipped this step */
  usersSkipped: Array<AccountUser>;
  /** A list of account users who viewed this step */
  usersViewed: Array<AccountUser>;
};

export type StepAutoCompleteInteraction = {
  __typename?: 'StepAutoCompleteInteraction';
  elementSelector: Scalars['String']['output'];
  entityId: Scalars['EntityId']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  step: GuideStepBase;
  type: StepAutoCompleteInteractionTypeEnumType;
  url: Scalars['String']['output'];
  wildcardUrl: Scalars['String']['output'];
};

/** The type of the step auto complete interaction */
export enum StepAutoCompleteInteractionTypeEnumType {
  Click = 'click'
}

export enum StepBodyOrientation {
  Horizontal = 'horizontal',
  Vertical = 'vertical'
}

export type StepBranchingPerformanceType = {
  __typename?: 'StepBranchingPerformanceType';
  /** Any new branching path that would result in adding the targeted module */
  activeBranchingPath?: Maybe<BranchingPath>;
  /**
   * Original branching path that triggered the branching
   * @deprecated Not implemented
   */
  branchingPath?: Maybe<BranchingPath>;
  choiceText?: Maybe<Scalars['String']['output']>;
  createdModule?: Maybe<Module>;
  triggeredCount?: Maybe<Scalars['Int']['output']>;
};

/** What kind of entity triggered the step completion */
export enum StepCompletedBy {
  AccountUser = 'accountUser',
  Auto = 'auto',
  User = 'user'
}

/** Number of steps associated with this sp, and how many are completed */
export type StepCompletionStatsType = {
  __typename?: 'StepCompletionStatsType';
  stepsCompleted?: Maybe<Scalars['Int']['output']>;
  totalSteps?: Maybe<Scalars['Int']['output']>;
  viewedSteps?: Maybe<Scalars['Int']['output']>;
};

/** The step CTA settings */
export type StepCtaSettingsType = {
  __typename?: 'StepCtaSettingsType';
  bgColorField: Scalars['String']['output'];
  eventName?: Maybe<Scalars['String']['output']>;
  implicit?: Maybe<Scalars['Boolean']['output']>;
  markComplete?: Maybe<Scalars['Boolean']['output']>;
  opensInNewTab?: Maybe<Scalars['Boolean']['output']>;
  textColorField: Scalars['String']['output'];
};

/** The style of the step CTA */
export enum StepCtaStyleEnumType {
  Link = 'link',
  Outline = 'outline',
  Solid = 'solid'
}

/** The type of the step CTA */
export enum StepCtaTypeEnumType {
  Back = 'back',
  Complete = 'complete',
  Event = 'event',
  Launch = 'launch',
  Next = 'next',
  Save = 'save',
  Skip = 'skip',
  Url = 'url',
  UrlComplete = 'url_complete'
}

/** A mapping of an event to an auto-completion of a step prototype */
export type StepEventMapping = {
  __typename?: 'StepEventMapping';
  completeForWholeAccount: Scalars['Boolean']['output'];
  entityId: Scalars['EntityId']['output'];
  eventName: Scalars['String']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  rules: Array<StepEventMappingRule>;
  stepPrototype: StepPrototype;
};

/** A prototype of a step that can be added to an account guide */
export type StepEventMappingRule = {
  __typename?: 'StepEventMappingRule';
  booleanValue?: Maybe<Scalars['Boolean']['output']>;
  dateValue?: Maybe<Scalars['DateTime']['output']>;
  entityId: Scalars['EntityId']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  numberValue?: Maybe<Scalars['Int']['output']>;
  propertyName: Scalars['String']['output'];
  ruleType: StepEventMappingRuleRuleType;
  stepEventMappingRule: StepEventMapping;
  textValue?: Maybe<Scalars['String']['output']>;
  valueType: StepEventMappingRuleValueType;
};

export enum StepEventMappingRuleRuleType {
  Eq = 'eq',
  Gt = 'gt',
  Gte = 'gte',
  Lt = 'lt',
  Lte = 'lte'
}

export enum StepEventMappingRuleValueType {
  Boolean = 'boolean',
  Date = 'date',
  Number = 'number',
  Text = 'text'
}

/** A prototype of a step that can be added to an account guide */
export type StepPrototype = {
  __typename?: 'StepPrototype';
  /**
   * The auto complete interaction of a step
   * @deprecated should be migrated over to `autoCompleteInteractions`
   */
  autoCompleteInteraction?: Maybe<StepPrototypeAutoCompleteInteraction>;
  /** Auto-complete interactions of a Step */
  autoCompleteInteractions?: Maybe<Array<Maybe<AutoCompleteInteraction>>>;
  /** The descriptive text of the step prototype */
  body?: Maybe<Scalars['String']['output']>;
  /** The Slate.JS RTE representation of the Step prototype body */
  bodySlate?: Maybe<Scalars['JSON']['output']>;
  branchingChoices?: Maybe<Array<BranchingChoice>>;
  branchingDismissDisabled?: Maybe<Scalars['Boolean']['output']>;
  branchingEntityType?: Maybe<BranchingEntityTypeEnum>;
  branchingFormFactor?: Maybe<BranchingFormFactorEnumType>;
  branchingKey?: Maybe<Scalars['String']['output']>;
  branchingMultiple?: Maybe<Scalars['Boolean']['output']>;
  branchingPaths?: Maybe<Array<BranchingPath>>;
  branchingPerformance?: Maybe<Array<StepBranchingPerformanceType>>;
  branchingQuestion?: Maybe<Scalars['String']['output']>;
  /** The CTAs of a step */
  ctas: Array<StepPrototypeCta>;
  dismissLabel?: Maybe<Scalars['String']['output']>;
  entityId: Scalars['EntityId']['output'];
  /**
   * Events or attributes that can auto-complete the step
   * @deprecated should be migrated over to `autoCompleteInteractions`
   */
  eventMappings: Array<StepEventMapping>;
  /** The ID of an object */
  id: Scalars['ID']['output'];
  inputType?: Maybe<Scalars['String']['output']>;
  /** The input prototypes of a step */
  inputs: Array<InputStepPrototype>;
  /** Can the step be completed via auto completion */
  isAutoCompletable: Scalars['Boolean']['output'];
  /** Wether an auto complete step can be manually completed. */
  manualCompletionDisabled: Scalars['Boolean']['output'];
  /** The media references associated to this step. */
  mediaReferences: Array<MediaReference>;
  /** The module in which this stepPrototype exists */
  module?: Maybe<Module>;
  /** The name of the step prototype */
  name: Scalars['String']['output'];
  snappyAt?: Maybe<Scalars['DateTime']['output']>;
  /** Counts of steps and steps completed */
  stepCompletionStats: StepCompletionStatsType;
  /** Whether or not step is required, optional, fyi, etc... */
  stepType: StepTypeEnum;
  /** Page elements selected to which to attach a context tag when this step is available */
  taggedElements: Array<StepPrototypeTaggedElement>;
  /** Templates this step prototype is part of */
  templates: Array<Maybe<Template>>;
};


/** A prototype of a step that can be added to an account guide */
export type StepPrototypeBranchingPerformanceArgs = {
  templateEntityId?: InputMaybe<Scalars['EntityId']['input']>;
};


/** A prototype of a step that can be added to an account guide */
export type StepPrototypeStepCompletionStatsArgs = {
  templateEntityId?: InputMaybe<Scalars['EntityId']['input']>;
};


/** A prototype of a step that can be added to an account guide */
export type StepPrototypeTaggedElementsArgs = {
  templateEntityId?: InputMaybe<Scalars['EntityId']['input']>;
};

export type StepPrototypeAutoCompleteInteraction = {
  __typename?: 'StepPrototypeAutoCompleteInteraction';
  elementHtml?: Maybe<Scalars['String']['output']>;
  elementSelector: Scalars['String']['output'];
  elementText?: Maybe<Scalars['String']['output']>;
  entityId: Scalars['EntityId']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  stepPrototype: StepPrototype;
  type: StepAutoCompleteInteractionTypeEnumType;
  url: Scalars['String']['output'];
  wildcardUrl: Scalars['String']['output'];
};

export type StepPrototypeCta = {
  __typename?: 'StepPrototypeCta';
  /**
   * The entity id of the guide this cta should launch, if any
   * @deprecated Use destinationGuideObj
   */
  destinationGuide?: Maybe<Scalars['String']['output']>;
  /** The guide this cta should launch, if any */
  destinationGuideObj?: Maybe<Template>;
  entityId: Scalars['EntityId']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** Index that indicates the order for ctas. */
  orderIndex: Scalars['Int']['output'];
  /** The settings of the step CTA */
  settings?: Maybe<StepCtaSettingsType>;
  stepPrototype: StepPrototype;
  style: StepCtaStyleEnumType;
  text: Scalars['String']['output'];
  type: StepCtaTypeEnumType;
  url?: Maybe<Scalars['String']['output']>;
};

export type StepPrototypeTaggedElement = {
  __typename?: 'StepPrototypeTaggedElement';
  alignment: ContextualTagAlignmentEnumType;
  elementHtml?: Maybe<Scalars['String']['output']>;
  elementSelector: Scalars['String']['output'];
  elementText?: Maybe<Scalars['String']['output']>;
  entityId: Scalars['EntityId']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  relativeToText: Scalars['Boolean']['output'];
  stepPrototype?: Maybe<StepPrototype>;
  style?: Maybe<VisualTagStyleSettings>;
  template: Template;
  tooltipAlignment: ContextualTagTooltipAlignmentEnumType;
  type: ContextualTagTypeEnumType;
  url: Scalars['String']['output'];
  wildcardUrl: Scalars['String']['output'];
  xOffset: Scalars['Int']['output'];
  yOffset: Scalars['Int']['output'];
};

/** The Step separation style */
export type StepSeparationStyleType = {
  __typename?: 'StepSeparationStyleType';
  boxActiveStepShadow: ActiveStepShadowType;
  boxBorderRadius: Scalars['Int']['output'];
  boxCompleteBackgroundColor?: Maybe<Scalars['String']['output']>;
  type: StepSeparationType;
};

/** The Step separation type */
export enum StepSeparationType {
  Border = 'border',
  Box = 'box'
}

/** What kind of step this is. e.g. required, optional */
export enum StepTypeEnum {
  Branching = 'branching',
  BranchingOptional = 'branching_optional',
  Fyi = 'fyi',
  Input = 'input',
  Optional = 'optional',
  Required = 'required'
}

/** Determine the visibility behavior of visual tags */
export enum TagVisibilityType {
  ActiveStep = 'active_step',
  Always = 'always'
}

export enum TargetAttributeRuleRuleTypeEnumType {
  All = 'all',
  Any = 'any',
  C = 'c',
  Empty = 'empty',
  Eq = 'eq',
  Gt = 'gt',
  Gte = 'gte',
  Lt = 'lt',
  Lte = 'lte',
  Nc = 'nc',
  Ne = 'ne',
  None = 'none',
  NotEmpty = 'notEmpty',
  Only = 'only',
  Re = 're',
  Rlt = 'rlt',
  Rmt = 'rmt'
}

/** A single group of targeting rules */
export type TargetGroupType = {
  __typename?: 'TargetGroupType';
  rules: Array<TargetRuleType>;
};

/** Determines the audience targeting criteria */
export type TargetRuleType = {
  __typename?: 'TargetRuleType';
  attribute: Scalars['String']['output'];
  ruleType: TargetRuleTypeEnumType;
  value: Scalars['TargetValueScalarType']['output'];
  valueType: AttributeValueTypeEnumType;
};

export enum TargetRuleTypeEnumType {
  All = 'all',
  Any = 'any',
  C = 'c',
  Empty = 'empty',
  Eq = 'eq',
  Gt = 'gt',
  Gte = 'gte',
  Lt = 'lt',
  Lte = 'lte',
  Nc = 'nc',
  Ne = 'ne',
  None = 'none',
  NotEmpty = 'notEmpty',
  Only = 'only',
  Re = 're',
  Rlt = 'rlt',
  Rmt = 'rmt'
}

/** Determines a given target criteria */
export type TargetType = {
  __typename?: 'TargetType';
  groups?: Maybe<Array<TargetGroupType>>;
  type: TargetTypeEnumType;
};

export enum TargetTypeEnumType {
  All = 'all',
  AttributeRules = 'attribute_rules',
  Role = 'role'
}

/** Determines targeting criteria */
export type TargetsType = {
  __typename?: 'TargetsType';
  account: TargetType;
  accountUser: TargetType;
  audiences?: Maybe<TargetType>;
};

export type Template = {
  __typename?: 'Template';
  /** The accounts that are using this template */
  accounts: Array<Account>;
  /**
   * The embed type (e.g. inline or sidebar) guides created from this template should be restricted to, if any.
   * @deprecated use formFactor
   */
  allowedEmbedType?: Maybe<GuideAllowedEmbedTypeEnumType>;
  announcementActivity: Array<Maybe<AnnouncementTimeSeriesPoint>>;
  /** Indicate this template will not show for users and is effectively gone */
  archivedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The number of account users that match auto launch rules */
  autoLaunchAudienceCount: Scalars['Int']['output'];
  /** Automatically create and launch for this template when a new account is created? */
  autoLaunchForAccountsCreatedAfter?: Maybe<Scalars['DateTime']['output']>;
  /** Represents number of accounts/users that have selected a branching path */
  branchedGuidesCount: Scalars['Int']['output'];
  /** Step groups that can be branched to in this template */
  branchingModules: Array<Module>;
  /** List of step groups dynamically added by branching, and how many users selected them */
  branchingPerformance: Array<BranchingPerformance>;
  /** The description of the template */
  description?: Maybe<Scalars['String']['output']>;
  /** The design type of the guide */
  designType: GuideDesignTypeEnumType;
  /** The timestamp at which auto-launch will be disabled */
  disableAutoLaunchAt?: Maybe<Scalars['DateTime']['output']>;
  /**
   * Means the public name, previously meant the private name
   * @deprecated Use `name` instead
   */
  displayTitle?: Maybe<Scalars['String']['output']>;
  /** Dynamic modules that target and can be appended to this template */
  dynamicModules: Array<Module>;
  /** The timestamp at which the template was last edited, or otherwise falls back to the timestamp at which the template was created if it has not yet been edited. */
  editedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The user that last edited the template */
  editedBy?: Maybe<User>;
  /** The timestamp at which auto-launch will be enabled */
  enableAutoLaunchAt?: Maybe<Scalars['DateTime']['output']>;
  entityId: Scalars['EntityId']['output'];
  /** After how many days the guide should expire */
  expireAfter?: Maybe<Scalars['Int']['output']>;
  /** Criteria based on which to expire guides */
  expireBasedOn: GuideExpirationCriteria;
  /** The form factor this guide is meant to display as. */
  formFactor?: Maybe<GuideFormFactorEnumType>;
  /** Style properties for this guides form factor */
  formFactorStyle?: Maybe<FormFactorStyle>;
  /** Guide bases launched from this template */
  guideBases: Array<GuideBase>;
  /** Indicates whether the template has one or more guide bases that have been auto-launched */
  hasAutoLaunchedGuideBases: Scalars['Boolean']['output'];
  /** Indicates whether the template has one or more guide bases */
  hasGuideBases: Scalars['Boolean']['output'];
  /**
   * Whether a CYOA template has incomplete paths or not.
   * @deprecated CYOA paths are branching v1 and deprecated
   */
  hasIncompleteCYOAPaths: Scalars['Boolean']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** The inline embed where this guide should be shown */
  inlineEmbed?: Maybe<OrganizationInlineEmbed>;
  /** If onboarding, the inline embed where it will show up */
  inlineOnboarding?: Maybe<OrganizationInlineEmbed>;
  /** @deprecated Use template stats to share caching mechanics */
  inputStepAnswersCount: Scalars['Int']['output'];
  inputsCount: Scalars['Int']['output'];
  /** Indicates if auto-launch is enabled for the template. */
  isAutoLaunchEnabled?: Maybe<Scalars['Boolean']['output']>;
  /** Whether this guide is CYOA (single step guide that branches to another guide) */
  isCyoa: Scalars['Boolean']['output'];
  /** Indicates whether the template is empty based on step body content */
  isEmpty: Scalars['Boolean']['output'];
  /** Whether this guide is a side quest or a main quest. */
  isSideQuest?: Maybe<Scalars['Boolean']['output']>;
  /** Whether or not active split tests are targeting this template */
  isTargetedForSplitTesting: SplitTestStateEnumType;
  /** If it is an unlaunchable template */
  isTemplate: Scalars['Boolean']['output'];
  /** When was the template last used */
  lastUsedAt?: Maybe<Scalars['DateTime']['output']>;
  launchedAt?: Maybe<Scalars['DateTime']['output']>;
  /** Templates that launch this one, e.g. with branching or CTA destination */
  launchedBy: Array<Maybe<Template>>;
  /** What (wildcard) URLs might the user be exposed to the guide */
  locationShown?: Maybe<Scalars['String']['output']>;
  /** The accounts to which this template has been manually launched */
  manuallyLaunchedAccounts: Array<Maybe<Account>>;
  /** The modules that comprise this template */
  modules: Array<Module>;
  /** Means the public name */
  name?: Maybe<Scalars['String']['output']>;
  notificationSettings?: Maybe<TemplateNotificationSettings>;
  /** The number of accounts with unmodified guides created from this template */
  numberOfAccountsWithUnmodifiedGuides: Scalars['Int']['output'];
  organization?: Maybe<Organization>;
  /** The type of page targeting mechanism */
  pageTargetingType: GuidePageTargetingEnumType;
  /** The URL for side quests page targeting, if enabled */
  pageTargetingUrl?: Maybe<Scalars['String']['output']>;
  /** Number of customers using this template */
  participantCount?: Maybe<Scalars['Int']['output']>;
  /** Ranking that indicates the order for auto-launchable templates. Higher rankings go first. */
  priorityRanking: Scalars['Int']['output'];
  /** Means the private name */
  privateName?: Maybe<Scalars['String']['output']>;
  /** The number of guides this template will propagate to */
  propagationCount: Scalars['Int']['output'];
  /** Number of pending propagation jobs as a result of saving */
  propagationQueue: Scalars['Int']['output'];
  /** Templates that this split test template leads to */
  splitSources: Array<Maybe<Template>>;
  /** Templates that this split test template leads to */
  splitTargets: Array<Maybe<Template>>;
  /** The state of the split test, if this template is of type split test. */
  splitTestState: SplitTestStateEnumType;
  /** The state of the template based on guide-bases created from it. */
  state: TemplateState;
  /** Template usage/completion stats */
  stats?: Maybe<TemplateStats>;
  stepPrototypes: Array<Maybe<StepPrototype>>;
  stepsCount: Scalars['Int']['output'];
  stoppedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The visual tags attached only to the template and not to any steps in the template */
  taggedElements: Array<StepPrototypeTaggedElement>;
  /** When/if targeting has been set by the user manually, or by manual launching */
  targetingSet?: Maybe<Scalars['DateTime']['output']>;
  /** The account and account user targeting rules for this template */
  targets?: Maybe<TargetsType>;
  /** The theme for this template */
  theme: ThemeType;
  /** Whether this template will create an account-specific guide or a user-specific guide */
  type: GuideTypeEnumType;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  /** The usage of the template in guide base and guide count */
  usage?: Maybe<TemplateUsage>;
  /** Whether a warning should be shown for an everboarding template with unpublished tags. */
  warnUnpublishedTag: Scalars['Boolean']['output'];
};


export type TemplateBranchingPerformanceArgs = {
  detachedOnly?: InputMaybe<Scalars['Boolean']['input']>;
};


export type TemplateStatsArgs = {
  useLocked?: InputMaybe<Scalars['Boolean']['input']>;
};


export type TemplateTaggedElementsArgs = {
  checkFirstStepSupport?: InputMaybe<Scalars['Boolean']['input']>;
};

/** Template last edited data */
export type TemplateLastEdited = {
  __typename?: 'TemplateLastEdited';
  timestamp?: Maybe<Scalars['DateTime']['output']>;
  user?: Maybe<User>;
};

export type TemplateNotificationSettings = {
  __typename?: 'TemplateNotificationSettings';
  /** Disable notifying on action steps */
  action?: Maybe<Scalars['Boolean']['output']>;
  /** Disable notifying on branching steps */
  branching?: Maybe<Scalars['Boolean']['output']>;
  /** Disable notifications entirely */
  disable?: Maybe<Scalars['Boolean']['output']>;
  /** Disable notifying on info steps */
  info?: Maybe<Scalars['Boolean']['output']>;
  /** Disable notifying on input steps */
  input?: Maybe<Scalars['Boolean']['output']>;
};

/** The current state of the template */
export enum TemplateState {
  Draft = 'draft',
  Live = 'live',
  Removed = 'removed',
  Stopped = 'stopped'
}

/** Template usage/completion stats */
export type TemplateStats = {
  __typename?: 'TemplateStats';
  /**
   * The number of guide bases created from this template
   * @deprecated Use guidesViewed instead for number of accounts that have seen the guide
   */
  accountsSeen?: Maybe<Scalars['Int']['output']>;
  /** Avarege number of steps completed in each guide */
  averageStepsCompleted?: Maybe<Scalars['Float']['output']>;
  /** Average steps completed but only counting those who have completed any steps */
  averageStepsCompletedForEngaged?: Maybe<Scalars['Float']['output']>;
  /** Count of users that have completed a step in this guide */
  completedAStep?: Maybe<Scalars['Int']['output']>;
  /**
   * The number of times any CTAs in this guide were clicked.
   * @deprecated Use usersClickedCta instead
   */
  ctaClickCount?: Maybe<Scalars['Int']['output']>;
  /** The number of guides with a registered view */
  guidesViewed?: Maybe<Scalars['Int']['output']>;
  /** The number of guides with at least one step complete */
  guidesWithCompletedStep?: Maybe<Scalars['Int']['output']>;
  /** Count of input answers submitted, not deduped by users */
  inputStepAnswersCount?: Maybe<Scalars['Int']['output']>;
  /** Out of all guides from this template, what percent are fully completed */
  percentCompleted?: Maybe<Scalars['Float']['output']>;
  /** Same as percentCompleted but instead of total guides, it is out of total guides with a view */
  percentGuidesCompleted?: Maybe<Scalars['Float']['output']>;
  /** Raw number of steps that are complete */
  totalStepsCompleted?: Maybe<Scalars['Int']['output']>;
  /** Count of unique users that have submitted an answer to input fields */
  usersAnswered?: Maybe<Scalars['Int']['output']>;
  /** Count of unique users that have clicked a CTA */
  usersClickedCta?: Maybe<Scalars['Int']['output']>;
  /** Count of users that dismissed an announcement (e.g. skipped step) */
  usersDismissed?: Maybe<Scalars['Int']['output']>;
  /** Count of users that saved an announcement for later */
  usersSavedForLater?: Maybe<Scalars['Int']['output']>;
  /** Count of users that have seen a step in this guide */
  usersSeenGuide?: Maybe<Scalars['Int']['output']>;
};

export type TemplateUsage = {
  __typename?: 'TemplateUsage';
  /** Number of guide bases auto launched */
  autoLaunchedAccounts: Scalars['Int']['output'];
  /** Number of guides auto launched */
  autoLaunchedUsers: Scalars['Int']['output'];
  /** Number of guide bases manual launched */
  manualLaunchedAccounts: Scalars['Int']['output'];
  /** Number of guides manual launched */
  manualLaunchedUsers: Scalars['Int']['output'];
};

export type TextOrEmailSettings = {
  __typename?: 'TextOrEmailSettings';
  helperText?: Maybe<Scalars['String']['output']>;
  maxValue?: Maybe<Scalars['Int']['output']>;
  placeholder?: Maybe<Scalars['String']['output']>;
  required: Scalars['Boolean']['output'];
};

/** Guide themes */
export enum ThemeType {
  Card = 'card',
  Carousel = 'carousel',
  Mailchimp = 'mailchimp',
  Minimal = 'minimal',
  Standard = 'standard',
  Timeline = 'timeline',
  VideoGallery = 'videoGallery'
}

export enum TooltipShowOn {
  PageLoad = 'page_load',
  TagHover = 'tag_hover'
}

export enum TooltipSize {
  Large = 'large',
  Medium = 'medium',
  Small = 'small'
}

export type TooltipStyle = {
  __typename?: 'TooltipStyle';
  backgroundColor?: Maybe<Scalars['String']['output']>;
  backgroundOverlayColor?: Maybe<Scalars['String']['output']>;
  backgroundOverlayOpacity?: Maybe<Scalars['Int']['output']>;
  canDismiss?: Maybe<Scalars['Boolean']['output']>;
  ctasOrientation?: Maybe<CtasOrientation>;
  hasArrow: Scalars['Boolean']['output'];
  hasBackgroundOverlay: Scalars['Boolean']['output'];
  height?: Maybe<Scalars['Int']['output']>;
  horizontalMediaAlignment?: Maybe<HorizontalMediaAlignment>;
  imageWidth?: Maybe<Scalars['String']['output']>;
  mediaFontSize?: Maybe<Scalars['Int']['output']>;
  mediaOrientation?: Maybe<MediaOrientation>;
  mediaTextColor?: Maybe<Scalars['String']['output']>;
  stepBodyOrientation?: Maybe<StepBodyOrientation>;
  textColor?: Maybe<Scalars['String']['output']>;
  tooltipShowOn: TooltipShowOn;
  tooltipSize: TooltipSize;
  verticalMediaAlignment?: Maybe<VerticalMediaAlignment>;
  verticalMediaOrientation?: Maybe<VerticalMediaOrientation>;
};

/** The org tooltips styles */
export type TooltipsStyleStyleType = {
  __typename?: 'TooltipsStyleStyleType';
  borderRadius?: Maybe<Scalars['Int']['output']>;
  paddingX?: Maybe<Scalars['Int']['output']>;
  paddingY?: Maybe<Scalars['Int']['output']>;
  shadow?: Maybe<AnnouncementShadowType>;
};

export type TwoWayState = {
  __typename?: 'TwoWayState';
  downState?: Maybe<IntegrationStateEnum>;
  upState?: Maybe<IntegrationStateEnum>;
};

export type UpdateVisualBuilderSessionInput = {
  previewData?: InputMaybe<Scalars['JSONObject']['input']>;
  progressData?: InputMaybe<Scalars['JSONObject']['input']>;
  state?: InputMaybe<VisualBuilderSessionState>;
  visualBuilderSessionEntityId: Scalars['EntityId']['input'];
};

export type UpdateVisualBuilderSessionPayload = {
  __typename?: 'UpdateVisualBuilderSessionPayload';
  errors?: Maybe<Array<Scalars['String']['output']>>;
  organization?: Maybe<Organization>;
  visualBuilderSession?: Maybe<VisualBuilderSession>;
};

export type User = {
  __typename?: 'User';
  allOrgs: Array<Maybe<Organization>>;
  avatarUrl?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  email: Scalars['String']['output'];
  entityId: Scalars['EntityId']['output'];
  extra?: Maybe<Scalars['JSON']['output']>;
  fullName?: Maybe<Scalars['String']['output']>;
  hasAssignedAccounts: Scalars['Boolean']['output'];
  hasBentoOnboardingGuide: Scalars['Boolean']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  isBentoOnboardingGuideComplete: Scalars['Boolean']['output'];
  isSuperadmin: Scalars['Boolean']['output'];
  orgSettings?: Maybe<OrganizationOrgSettings>;
  organization: Organization;
  phoneNumber?: Maybe<Scalars['String']['output']>;
};

export enum VerticalMediaAlignment {
  Bottom = 'bottom',
  Center = 'center',
  Top = 'top'
}

export enum VerticalMediaOrientation {
  Bottom = 'bottom',
  Top = 'top'
}

export type VideoGalleryStyle = {
  __typename?: 'VideoGalleryStyle';
  advancedPadding?: Maybe<Scalars['String']['output']>;
  backgroundColor?: Maybe<Scalars['String']['output']>;
  borderColor?: Maybe<Scalars['String']['output']>;
  borderRadius?: Maybe<Scalars['Int']['output']>;
  canDismiss?: Maybe<Scalars['Boolean']['output']>;
  mediaFontSize?: Maybe<Scalars['Int']['output']>;
  mediaTextColor?: Maybe<Scalars['String']['output']>;
  padding?: Maybe<Scalars['Int']['output']>;
  selectedBackgroundColor?: Maybe<Scalars['String']['output']>;
  statusLabelColor?: Maybe<Scalars['String']['output']>;
  textColor?: Maybe<Scalars['String']['output']>;
};

export type VideoMediaMeta = {
  __typename?: 'VideoMediaMeta';
  videoId?: Maybe<Scalars['String']['output']>;
  videoType?: Maybe<Scalars['String']['output']>;
};

export type VideoMediaReferenceSettings = {
  __typename?: 'VideoMediaReferenceSettings';
  alignment?: Maybe<Scalars['String']['output']>;
  playsInline?: Maybe<Scalars['Boolean']['output']>;
};

export type VisualBuilderSession = {
  __typename?: 'VisualBuilderSession';
  entityId: Scalars['EntityId']['output'];
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** Data used to initialize the editor */
  initialData: Scalars['JSONObject']['output'];
  /** Data used to render a preview of the editor changes in Shoyu */
  previewData?: Maybe<Scalars['JSONObject']['output']>;
  /** Data representing the editors saved progress */
  progressData?: Maybe<Scalars['JSONObject']['output']>;
  /** The current state of the session */
  state: VisualBuilderSessionState;
  /** The type of editor session (e.g., tag, inline embed etc.) */
  type: VisualBuilderSessionType;
};

export enum VisualBuilderSessionState {
  Cancelled = 'cancelled',
  Complete = 'complete',
  InProgress = 'in_progress',
  PendingUrl = 'pending_url'
}

export enum VisualBuilderSessionType {
  AutoGuideBuilder = 'auto_guide_builder',
  Autocomplete = 'autocomplete',
  Inline = 'inline',
  Tag = 'tag'
}

export type VisualTagHighlightSettings = {
  __typename?: 'VisualTagHighlightSettings';
  color?: Maybe<Scalars['String']['output']>;
  opacity?: Maybe<Scalars['Float']['output']>;
  padding?: Maybe<Scalars['Int']['output']>;
  pulse?: Maybe<Scalars['Boolean']['output']>;
  radius?: Maybe<Scalars['Int']['output']>;
  text?: Maybe<Scalars['String']['output']>;
  thickness?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<VisualTagHighlightType>;
};

export enum VisualTagHighlightType {
  Halo = 'halo',
  None = 'none',
  Overlay = 'overlay',
  Solid = 'solid'
}

export enum VisualTagPulseLevelType {
  None = 'none',
  Standard = 'standard'
}

export type VisualTagStyleSettings = VisualTagHighlightSettings;

export type Webhook = {
  __typename?: 'Webhook';
  entityId: Scalars['EntityId']['output'];
  /** The API key for the organization to connect to Bento's segment integration */
  eventType: EventHookTypeEnum;
  /** The ID of an object */
  id: Scalars['ID']['output'];
  /** The organization that the webhook belongs to */
  organization: Organization;
  /** Used to verify Bento with the recipient */
  secretKey?: Maybe<Scalars['String']['output']>;
  state: WebhookStateTypeEnum;
  webhookType: WebhookTypeTypeEnum;
  /** Where to send the data payload */
  webhookUrl: Scalars['String']['output'];
};

export enum WebhookStateTypeEnum {
  Active = 'active',
  Inactive = 'inactive'
}

export enum WebhookTypeTypeEnum {
  Standard = 'standard'
}

export type ZendeskState = {
  __typename?: 'ZendeskState';
  /** @deprecated Use orgSettings.helpCenter instead */
  issueSubmission?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated Use orgSettings.helpCenter instead */
  kbSearch?: Maybe<Scalars['Boolean']['output']>;
  /** @deprecated Use orgSettings.helpCenter instead */
  liveChat?: Maybe<Scalars['Boolean']['output']>;
  subdomain?: Maybe<Scalars['String']['output']>;
  username?: Maybe<Scalars['String']['output']>;
};
