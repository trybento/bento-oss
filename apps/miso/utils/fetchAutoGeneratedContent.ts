import env from '@beam-australia/react-env';
import { GptErrors } from 'bento-common/types';
import {
  GPTGeneratedGuide,
  GptGuideRequest,
} from 'bento-common/types/integrations';
import {
  ClientStorage,
  readFromClientStorage,
} from 'bento-common/utils/clientStorage';
import { IS_DEVELOPMENT, IS_STAGING } from 'utils/constants';

type Args = {
  accessToken: string;
} & Omit<GptGuideRequest, 'testPrompt'>;

export default async function fetchAutoGeneratedContent({
  accessToken,
  transcript,
  links,
  articleText,
  templateEntityId,
  pageText,
  method,
}: Args): Promise<{
  choices: GPTGeneratedGuide[];
  error: GptErrors | undefined;
}> {
  const testPrompt =
    IS_DEVELOPMENT || IS_STAGING
      ? readFromClientStorage(ClientStorage.localStorage, 'gptTestPrompt')
      : undefined;

  try {
    if (testPrompt)
      console.debug(
        `[fetchAutoGeneratedContent] Using testPrompt: ${testPrompt}`
      );

    const res = await fetch(`${env('API_HOST')}/integrations/guide-gpt`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${accessToken}`,
      },
      body: JSON.stringify({
        transcript,
        links,
        pageText,
        templateEntityId,
        articleText,
        method,
        ...(testPrompt && { testPrompt }),
      }),
    });
    const result = await res.json();
    if (res.ok) {
      return {
        choices: result.choices as GPTGeneratedGuide[],
        error: undefined,
      };
    } else {
      return { choices: [], error: result.error };
    }
  } catch (e) {
    return { choices: [], error: GptErrors.apiError };
  }
}
