/* Auto-generated by graphql-codegen. Do not edit.  */
/* Make query edits in the corresponding /graphql/*.graphql file */
/* eslint-disable */
import * as Types from '../../schema.types';

import { gql } from 'urql';
import { InlineEmbedsQuery_InlineEmbed } from '../../queries/generated/InlineEmbeds';
import * as Urql from 'urql';
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type InlineEmbedsChangedVariables = Types.Exact<{ [key: string]: never; }>;


export type InlineEmbedsChanged = { __typename?: 'Subscription', inlineEmbedsChanged?: Array<{ __typename?: 'EmbedOrganizationInlineEmbed', entityId: any, url: string, wildcardUrl: string, elementSelector: string, position: Types.InlineEmbedPosition, topMargin: number, rightMargin: number, bottomMargin: number, padding: number, borderRadius: number, leftMargin: number, alignment?: Types.InlineEmbedAlignment | null, maxWidth?: number | null, guide?: any | null } | null> | null };


export const InlineEmbedsChangedDocument = gql`
    subscription InlineEmbedsChanged {
  inlineEmbedsChanged {
    ...InlineEmbedsQuery_inlineEmbed
  }
}
    ${InlineEmbedsQuery_InlineEmbed}`;

export function useInlineEmbedsChanged<TData = InlineEmbedsChanged>(options: Omit<Urql.UseSubscriptionArgs<InlineEmbedsChangedVariables>, 'query'> = {}, handler?: Urql.SubscriptionHandler<InlineEmbedsChanged, TData>) {
  return Urql.useSubscription<InlineEmbedsChanged, TData, InlineEmbedsChangedVariables>({ query: InlineEmbedsChangedDocument, ...options }, handler);
};