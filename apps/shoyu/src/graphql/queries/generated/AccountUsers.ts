/* Auto-generated by graphql-codegen. Do not edit.  */
/* Make query edits in the corresponding /graphql/*.graphql file */
/* eslint-disable */
import * as Types from '../../schema.types';

import { gql } from 'urql';
import * as Urql from 'urql';
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type AccountUsersVariables = Types.Exact<{ [key: string]: never; }>;


export type AccountUsers = { __typename?: 'RootType', account: { __typename?: 'EmbedAccount', id: string, ticketsEnabled: boolean, accountUsers: Array<{ __typename?: 'AccountUser', id: string, entityId: any, fullName?: string | null, email?: string | null }> } };


export const AccountUsersDocument = gql`
    query AccountUsers {
  account {
    id
    ticketsEnabled
    accountUsers {
      id
      entityId
      fullName
      email
    }
  }
}
    `;

export function useAccountUsers(options?: Omit<Urql.UseQueryArgs<AccountUsersVariables>, 'query'>) {
  return Urql.useQuery<AccountUsers, AccountUsersVariables>({ query: AccountUsersDocument, ...options });
};